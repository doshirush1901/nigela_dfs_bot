import os
import json
import base64
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# Gmail API scopes
SCOPES = ['https://www.googleapis.com/auth/gmail.send']

class GmailSender:
    def __init__(self, credentials_file="rushabh_gmail_client_secret_29686905270-m9dn4o28hj3ldv7395tsvih857dodoek.apps.googleusercontent.com.json"):
        self.credentials_file = credentials_file
        self.token_file = "gmail_token.json"
        self.service = None
        self._authenticate()
    
    def _authenticate(self):
        """Authenticate with Gmail API using OAuth2"""
        creds = None
        
        # Load existing token if available
        if os.path.exists(self.token_file):
            creds = Credentials.from_authorized_user_file(self.token_file, SCOPES)
        
        # If no valid credentials, get new ones
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                try:
                    creds.refresh(Request())
                except Exception:
                    # Refresh failed, need new auth
                    creds = None
            
            if not creds:
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.credentials_file, SCOPES)
                creds = flow.run_local_server(port=0)
            
            # Save credentials for next run
            with open(self.token_file, 'w') as token:
                token.write(creds.to_json())
        
        # Build Gmail service
        self.service = build('gmail', 'v1', credentials=creds)
        print("‚úÖ Gmail API authenticated successfully!")
    
    def send_email(self, to_email: str, subject: str, body_text: str, body_html: str = None):
        """Send email via Gmail API"""
        try:
            # Create message
            message = MIMEMultipart('alternative')
            message['to'] = to_email
            message['subject'] = subject
            
            # Add text part
            text_part = MIMEText(body_text, 'plain')
            message.attach(text_part)
            
            # Add HTML part if provided
            if body_html:
                html_part = MIMEText(body_html, 'html')
                message.attach(html_part)
            
            # Encode message
            raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode()
            
            # Send via Gmail API
            send_message = self.service.users().messages().send(
                userId="me", 
                body={'raw': raw_message}
            ).execute()
            
            print(f"üìß Email sent successfully! Message ID: {send_message['id']}")
            return True
            
        except HttpError as error:
            print(f"‚ùå Gmail API error: {error}")
            return False
        except Exception as error:
            print(f"‚ùå Email sending error: {error}")
            return False

def send_nigela_menu_email(plan: dict, recipient: str = "palakbsanghavi@gmail.com"):
    """Send daily menu email using Gmail API"""
    from .llm import nightly_email_copy
    from datetime import date, timedelta
    
    # Generate email content
    tomorrow = date.today() + timedelta(days=1)
    subject = f"Nigela ‚Ä¢ Daily Menu for {tomorrow.strftime('%B %d, %Y')}"
    
    try:
        # Get Nigela's warm email copy
        body_text = nightly_email_copy(plan)
    except Exception:
        # Fallback to simple format
        body_text = f"""Dear Palak,

Here's tomorrow's menu suggestion from Nigela:

"""
        for meal, dishes in plan.items():
            body_text += f"\n{meal.upper()}:\n"
            for slot, dish in dishes.items():
                body_text += f"‚Ä¢ {dish.name} ({dish.cook_minutes}min)\n"
        
        body_text += "\nWith love from your kitchen assistant,\nNigela üíï"
    
    # Create HTML version
    body_html = f"""
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #d4691a;">üçΩÔ∏è Nigela's Daily Menu</h2>
        <p style="color: #666;">{tomorrow.strftime('%A, %B %d, %Y')}</p>
        <div style="background: #f9f9f9; padding: 20px; border-radius: 10px;">
            {body_text.replace(chr(10), '<br>')}
        </div>
        <p style="text-align: center; color: #888; margin-top: 20px;">
            <em>Generated by Nigela AI Cooking Assistant</em>
        </p>
    </div>
    """
    
    # Send email
    gmail = GmailSender()
    return gmail.send_email(recipient, subject, body_text, body_html)

if __name__ == "__main__":
    # Test authentication
    gmail = GmailSender()
    print("Gmail authentication test completed!")
